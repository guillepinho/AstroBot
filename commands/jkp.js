module.exports = {
    name: 'jkp',
    description: 'jokenpo',
    async execute(message, args) {
        if (args[0] === '' || !args[0] || !args[0].startsWith('<@')) {
            message.reply('Acho que o sinh√¥ esqueceu de marcar com quem voc√™ ia jogar antes.');
            return;
        }

        const alvo = message.mentions.members.first().id;
        const desafiador = message.author.id;
        let jogadaAuthor = '';
        let jogadaAlvo = '';

        if (alvo === '954183613900005386') {
            message.reply('Desculpa√™, mas eu nem t√¥ afim de jogar... procura ot√¥.');
            return;
        }

        if (alvo === desafiador) {
            message.reply('... oc√™, contra voc√™ mesmo?');
            message.channel.send('https://c.tenor.com/-P-xeHYEY9QAAAAd/sad-pablo-lonely.gif');
            return;
        }

        message.delete();

        message.channel.send(`Turu bon, <@!${alvo}>? <@!${desafiador}> te desafiou para um jokenp√¥, topas? Mandei uma mensagem no seu DM, s√≥ reagir a mensagem para registrar qual a sua jogada por l√°. Se n√£o quiser jogar tamb√©m, s√≥ ignorar.`);
        message.author.send(`Qual vai ser a sua jogada, <@!${desafiador}>?`)
            .then(async (dm) => {
                dm.react('üëä');
                dm.react('‚úåÔ∏è');
                dm.react('‚úã');

                const filter = (reaction, user) => {
                    return user.id === desafiador && ['üëä', '‚úåÔ∏è', '‚úã'].includes(reaction.emoji.name);
                };

                const coletor = dm.createReactionCollector({
                    filter,
                    max: 1,
                    time: 1000 * 10,
                });

                coletor.on('collect', (reaction, user) => {
                    message.channel.send(`Coletada a jogada de ${user.username}.`).then(msgA => {
                        setTimeout(function() {
                        msgA.delete();
                    }, 4000);
                });
                    jogadaAuthor = `${reaction.emoji.name}`;
                    coletor.stop();
                });

                coletor.on('end', (collected) => {
                    if (collected.size === 0) {
                        message.channel.send(`<@!${desafiador}> n√£o me passou qual ia ser sua jogada hein... üêî`);
                        return;
                    }
                });
            })
            .catch(error => {
                message.channel.send(`A DM de <@!${desafiador}> est√° fechada para mim... Assim n√£o conseguiremos jogar.`);
            return;
        });

        message.mentions.members.first().send(`Qual vai ser a sua jogada, <@!${alvo}>?`)
            .then(async (dmA) => {
                dmA.react('üëä');
                dmA.react('‚úåÔ∏è');
                dmA.react('‚úã');

                const filter = (reaction, user) => {
                    return user.id === alvo && ['üëä', '‚úåÔ∏è', '‚úã'].includes(reaction.emoji.name);
                };

                const coletor = dmA.createReactionCollector({
                    filter,
                    max: 1,
                    time: 1000 * 10,
                });

                coletor.on('collect', (reaction, user) => {
                    message.channel.send(`Coletada a jogada de ${user.username}.`).then(msgB => {
                        setTimeout(function() {
                        msgB.delete();
                    }, 4000);
                });
                    jogadaAlvo = `${reaction.emoji.name}`;
                    coletor.stop();
                });

                coletor.on('end', (collected) => {
                    if (collected.size === 0) {
                        message.channel.send(`<@!${alvo}> n√£o me passou qual ia ser a sua jogada hein... üêî`);
                        return;
                    }
                });
            })
            .catch(error => {
                message.channel.send(`A DM de <@!${alvo}> est√° fechada para mim... Assim n√£o conseguiremos jogar.`);
            return;
        });

        setTimeout(function() {
            if (jogadaAlvo === '' || jogadaAuthor === '') {
                message.channel.send('Como teve gente que n√£o jogou, encerrei o jogo. Se quiserem, s√≥ tentar de novo, t√°? abra√ßu.');
                return;
            }
            message.channel.send('https://c.tenor.com/7HFPLm7Rl8oAAAAC/321-count-down.gif')
            .then(msgC => {
                setTimeout(function() {
                msgC.delete();
                if (jogadaAuthor === 'üëä' && jogadaAlvo === '‚úåÔ∏è') {
                    message.channel.send(`<@!${desafiador}> jogou ${jogadaAuthor} e <@!${alvo}> jogou ${jogadaAlvo}. \n Eeeeeeeeee <@!${desafiador}> ganhoooooou!`);
                }
                else if (jogadaAuthor === '‚úåÔ∏è' && jogadaAlvo === '‚úã') {
                    message.channel.send(`<@!${desafiador}> jogou ${jogadaAuthor} e <@!${alvo}> jogou ${jogadaAlvo}. \n Eeeeeeeeee <@!${desafiador}> ganhoooooou!`);
                }
                else if (jogadaAuthor === '‚úã' && jogadaAlvo === 'üëä') {
                    message.channel.send(`<@!${desafiador}> jogou ${jogadaAuthor} e <@!${alvo}> jogou ${jogadaAlvo}. \n Eeeeeeeeee <@!${desafiador}> ganhoooooou!`);
                }
                else if (jogadaAuthor === jogadaAlvo) {
                    message.channel.send(`<@!${desafiador}> jogou ${jogadaAuthor} e <@!${alvo}> jogou ${jogadaAlvo}. \n Eeeeeeeeee deu EMPATE, incr√≠vel.`);
                }
                else {
                    message.channel.send(`<@!${desafiador}> jogou ${jogadaAuthor} e <@!${alvo}> jogou ${jogadaAlvo}. \n Eeeeeeeeee <@!${alvo}> ganhoooooou!`);
                }
            }, 4000);
        });
        }, 10001);
    }
};