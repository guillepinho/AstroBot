/* eslint-disable no-inner-declarations */
/* eslint-disable max-nested-callbacks */
const { MessageEmbed } = require('discord.js');
const fs = require('fs');
const config = fs.readFileSync('./jsons/spyconfig.json');
const locations = require('../jsons/spylocs.json');

module.exports = {
    name: 'spy',
    description: 'joguinho do spyfall do astro',
    async execute(message, args) {
        if (args[0] === 'help' || args[0] === 'como') {
            const help = new MessageEmbed()
                .setColor([45, 25, 52])
                .setTitle('Como jogar Spyfall? üïµÔ∏è')
                .setDescription('Aqui vai um resumo das regras e como se joga:')
                .addFields(
                    { name: 'Locais', value: 'Ao in√≠cio de cada round, todos os jogadores recebem a informa√ß√£o de qual local estamos (sorteado dentre os dispon√≠ves em minha database). Apenas um (ou mais a depender das configura√ß√µes) dos jogadores n√£o sabe em qual local, ele √© o espi√£o.' },
                    { name: 'Cargos', value: 'Os cargos s√£o distribu√≠dos aleatoriamente entre os jogadores e todos eles tem rela√ß√£o com o local sorteado, s√£o profiss√µes ou tipos de pessoas comuns ao ambiente. O espi√£o, por outro lado, recebe apenas o cargo de espi√£o.' },
                    { name: 'Como Joga?', value: 'O jogo sortear√° uma pessoa que come√ßa a partida. Ela ir√° escolher um dos jogadores para responder uma pergunta que, ap√≥s responder, deve fazer uma pergunta para outro jogador qualquer, com exce√ß√£o do que acabou de fazer uma pergunta (ou seja, nada de ping-pong entre dois jogadores). Mas que tipo de pergunta? Calma, jovem padawan, j√° te explico!' },
                    { name: 'Objetivos', value: 'O objetivo dos jogadores n√£o-espi√µes √© trabalhar em grupo para descobrir quem √© o espi√£o, para isso servem as perguntas! Os jogadores conversar√£o com perguntas e respostas, tentando n√£o entregar qual o local em que todos est√£o, mas, ao mesmo tempo, demonstrando que n√£o s√£o o espi√£o. E o espi√£o? Bom, o trabalho dele √© se misturar entre os jogadores, os convencendo que tamb√©m n√£o √© espi√£o, enquanto tenta decifrar atrav√©s das perguntas e respostas qual √© o local em que todos est√£o.' },
                    { name: 'Como ganha?', value: 'O espi√£o ganha se descobrir com sucesso qual o local ou, se esgotado o tempo de partida, n√£o descobrirem que ele √© o espi√£o. Os outros jogadores ganham ao descobrir quem √© o espi√£o.' },
                    { name: 'Votos', value: 'A qualquer momento os jogadores podem chamar uma vota√ß√£o (inclusive o espi√£o, hein?), para denunciar um dos jogadores como o espi√£o. Caso a maioria concorde em abrir vota√ß√£o, todos devem votar em quem acham que √© o espi√£o. Caso o tempo se encerre, a vota√ß√£o √© aberta automaticamente. Se o espi√£o for descoberto, ele tem o direito de "chutar" o local uma √∫nica vez, se acertar, ele ainda vence!' })
                .setImage('https://c.tenor.com/txDqgTLcIW0AAAAC/spy-spying.gif');
            message.channel.send({ embeds: [help] });
        }
        else {
            let filter;

            const jsonConfig = JSON.parse(config);

            let tempo = jsonConfig.tempo;
            const spy = jsonConfig.spy;
            const tempoPartida = jsonConfig.tempo;

            var runTimer = Boolean;

            let interval;
            let msgTimer;

            async function timer(parametro) {
                if (parametro === 1) {
                    msgTimer = await message.channel.send(`__Timer__: ${tempo} segundos`);
                    interval = setInterval(() => {
                        runTimer = true;
                        tempo -= 3;
                        msgTimer.edit(`__Timer__: ${tempo} segundos`);
                        if (tempo <= 0) {
                            runTimer = false;
                            clearInterval(interval);
                            msgTimer.edit('**TEMPO ESGOTADO!**');
                        }
                    }, 3000);
                    return;
                }
                if (parametro === 0) {
                    runTimer = false;
                    clearInterval(interval);
                    msgTimer.edit('**JOGO ENCERRADO!**');
                    return;
                }
            }

            const jogo = {
                jogadores: []
            };

            const chamaSpy = new MessageEmbed()
                .setColor([45, 25, 52])
                .setTitle('GAME TIIIME!')
                .setDescription(`${message.author.username}, est√° convidando geral para um partidinha de **SPYFALL**, quem topa? S√≥ reagir ao emoji do espi√£o em 30 segundos, se n√£o voc√™ t√° fora, teje avisado!`)
                .setImage('https://c.tenor.com/vhxaixvLUz4AAAAd/stalking-spying.gif')
                .addFields({
                    name: 'Como jogar?', value: 'Cada pessoa receber√° um cargo relacionado √† um local. Os espi√µes n√£o sabem que local √© esse e devem se misturar e se disfar√ßar, at√© descobrirem qual √© o local. Os outros devem trabalhar em conjunto para expor quem √© o espi√£o, sem entregar qual o local que est√°.'
                });

            let msgLista = '__**Lista de jogadores**__:';

            message.channel.send({ embeds: [chamaSpy] })
                .then(async (msg) => {
                    msg.react('üïµÔ∏è');
                    let contadorPessoas = 0;
                    const lista = await message.channel.send(msgLista);
                    let clear = false;

                    filter = (reaction, user) => {
                        return !user.bot;
                    };

                    const coletor = msg.createReactionCollector({
                        filter,
                        time: 1000 * 30,
                        dispose: true
                    });

                    coletor.on('collect', (reaction, user) => {
                        if (reaction.emoji.name === 'üïµÔ∏è') {
                            contadorPessoas++;
                            jogo.jogadores.push({
                                id: user.id
                            });
                            msgLista = msgLista + `\n ‚Ä¢ <@!${user.id}>`;
                            lista.edit(msgLista);
                        }
                    });

                    coletor.on('remove', (reaction) => {
                        if (reaction.emoji.name === 'üïµÔ∏è') {
                            clear = true;
                            message.channel.send('Algu√©m removeu a rea√ß√£o, para n√£o confundir tudo, vou cancelar o jogo, ok?');
                        }
                    });

                    coletor.on('end', async (collected) => {
                        if (clear == true) {
                            return;
                        }
                        const local = locations.locais[Math.floor(Math.random() * (locations.locais.length + 1))];

                        const actConfigs = new MessageEmbed()
                            .setColor([45, 25, 52])
                            .setTitle('Atuais configura√ß√µes do Spyfall üïµÔ∏è')
                            .setDescription('Essas s√£o as atuais configura√ß√µes do jogo que ir√° rolar!')
                            .addFields(
                                { name: 'Tempo de Jogo', value: `${tempoPartida} segundos.`, inline: true },
                                { name: 'Qtd. de Espi√µes', value: `${spy}`, inline: true }
                            );
                        if (collected.size === 0) {
                            message.channel.send('M√° rapai... ningu√©m vai jogar? Oxe.');
                            return;
                        }
                        if (contadorPessoas < 4) {
                            message.channel.send('Legal, Legal... mas tem pouca gente para jogar. Melhor tentarmos de novo depois, t√°? Procura mais gente! üïµÔ∏è');
                            return;
                        }
                        else {
                            message.channel.send('Ok, me parece que temos jogadores o suficiente!! Que comecem as espionagens! üïµÔ∏è')
                            .then(msgOk => setTimeout(function() {
                                msgOk.delete();
                            }, 15000));
                            message.channel.send({ embeds: [actConfigs] })
                                .then(async msgC => {
                                    setTimeout(function() {
                                        msgC.delete();
                                    }, 15000);

                                    const spies = jogo.jogadores[Math.floor(Math.random() * jogo.jogadores.length)];
                                    spies.cargo = 'Espi√£o';
                                    spies.loc = 'Desconhecida';

                                    for (let i = 0; i < jogo.jogadores.length; i++) {
                                        if (jogo.jogadores[i].cargo !== 'Espi√£o') {
                                            jogo.jogadores[i].loc = local.nome;
                                            jogo.jogadores[i].cargo = local.cargos[i];
                                        }
                                    }

                                    const comeca = jogo.jogadores[Math.floor(Math.random() * jogo.jogadores.length)].id;

                                    let listaLocais = '';

                                    for (let j = 0; j < locations.locais.length; j++) {
                                        listaLocais += '‚Ä¢ ' + locations.locais[j].nome + '\t \t';
                                        if (j > 0 && j % 4 === 0) {
                                            listaLocais += '\n';
                                        }
                                    }

                                    jogo.jogadores.forEach(jogador => {
                                        message.client.users.fetch(jogador.id).then(usuario => {
                                            usuario.send(`A localiza√ß√£o √© **${jogador.loc}**. Seu cargo √© **${jogador.cargo}**. \n__A lista de locais dispon√≠veis √© a seguinte__:\n${listaLocais}`)
                                                // eslint-disable-next-line no-unused-vars
                                                .catch(error => {
                                                    message.channel.send(`A√≠ ce complica... tem um z√© ruela ai, n√£o vou dizer quem √© o <@!${jogador.id}>, que tem DM fechada, meu patr√£o... P√î, COMO VAI JOGAR ASSIM CARA?`);
                                                    return;
                                                });
                                        });
                                    });

                                    message.channel.send(`Quem come√ßa o jogo √©: **<@!${comeca}>**.`)
                                        .then(msgCome√ßa => setTimeout(function() {
                                            msgCome√ßa.delete();
                                        }, 15000));

                                    message.channel.send(`Pronto, todos j√° receberam seus cargos no PV, vou dar 15 segundos para voc√™s lerem tudo com calma e j√°j√° come√ßo o timer de ${tempo} segundos. O tempo iniciar√° __**assim**__ que essa mensagem for apagada.`)
                                        .then(msgReady => setTimeout(function() {
                                            msgReady.delete();
                                        }, 15000));

                                    setTimeout(function() {
                                        timer(1);
                                    }, 15000);

                                    setTimeout(function() {
                                        timer(0);
                                    }, 30000);
                                });
                        }
                    });

                    filter = m => m.content.includes('spycabo');
                    const coletorFim = message.channel.createMessageCollector({
                        filter,
                        time: (tempoPartida * 1000 + 15000)
                    });

                    coletorFim.on('collect', m => {
                        if (runTimer === false || runTimer === undefined) {
                            m.reply('√äeeeh laia. N√£o tem jogo do spyfall rodando, seu tonto.');
                            return;
                        }
                        if (runTimer == true) {
                            timer(0);
                        }
                    });

                    coletorFim.on('end', collected => {
                        console.log(`Collected ${collected.size} items`);
                    });
                });
        }
    }
};